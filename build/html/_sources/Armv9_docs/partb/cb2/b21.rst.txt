.. toctree::
   :maxdepth: 2
   :caption: Contents:

===================================
B2.1 About the Arm memory model
===================================


The Arm architecture is a weakly ordered memory architecture that permits the observation and completion of memory accesses in a different order from the program order. The following sections of this chapter provide the complete definition of the memory model. This introduction is not intended to contradict the definition found in those sections. 
::
    这里是解释

In general, the basic principles of the memory model are:

- To provide a memory model that has similar weaknesses to those found in the memory models used by high-level programming languages such as C or Java. For example, by permitting independent memory accesses to be reordered as seen by other observers.
- To avoid the requirement for multi-copy atomicity in the majority of memory types.
- The provision of instructions and memory barriers to compensate for the lack of multi-copy atomicity in the cases where it would be needed is required.
- The use of address, data, and control dependencies in the creation of order so as to avoid having excessive numbers of barriers or other explicit instructions in common situations where some order is required by the programmer or the compiler.
- If FEAT_MTE2 is implemented, the definitions of the memory model which apply to data accesses and data apply to Allocation Tag accesses and Allocation tags.

This section contains:

- Address space.
- Memory type overview on page B2-161.

B2.1.1 Address space
===================================

Address calculations are performed using 64-bit registers. However, supervisory software can configure the top 
eight address bits for use as a tag, as described in Address tagging on page D8-5894. If this is done, address 
bits[63:56]:

- Are not considered when determining whether the address is valid.
- Are never propagated to the Program Counter.

Supervisory software determines the valid address range. Attempting to access an address that is not valid generates 
an MMU fault. 

Simple sequential execution of instructions might overflow the valid address range. For more information, see 
Virtual address space overflow on page D7-5763.

Memory accesses use the Mem[] function. This function makes an access of the required type. If supervisory software 
configures the top eight address bits for use as a tag, the top eight address bits are ignored. 

The AccessType defines the different access types and attributes.

.. note ::
    Note

    - Chapter D7 The AArch64 System Level Memory Model and Chapter D8 The AArch64 Virtual Memory System Architecture include descriptions of memory system features that are transparent to the application, including memory access, address translation, memory maintenance instructions, and alignment checking and the associated fault handling. These chapters also include pseudocode descriptions of these operations.
    - For information on the pseudocode that relates to memory accesses, see Basic memory access on page D7-5802, Unaligned memory access on page D7-5802, and Aligned memory access on page D7-5802


B2.1.2 Memory type overview
===================================

The Arm architecture provides the following mutually-exclusive memory types:

Normal This is generally used for bulk memory operations, both read/write and read-only operations.
Device The Arm architecture forbids Speculative reads of any type of Device memory. This means Device 
memory types are suitable attributes for read-sensitive Locations.

Locations of the memory map that are assigned to peripherals are usually assigned the Device 
memory attribute.

Device memory has additional attributes that have the following effects:

- They prevent aggregation of reads and writes, maintaining the number and size of the 
specified memory accesses. See Gathering on page B2-217.
- They preserve the access order and synchronization requirements for accesses to a single 
peripheral. See Reordering on page B2-218.
- They indicate whether a write can be acknowledged other than at the end point. See Early 
Write Acknowledgement on page B2-219.

For more information on Normal memory and Device memory, see Memory types and attributes on page B2-210.

.. note ::
    Note
    
    Earlier versions of the Arm architecture defined a single Device memory type and a Strongly-ordered memory type. A Note in Device memory on page B2-214 describes how these memory types map onto the Armv8 memory types.


B2.1.3 SVE memory model
===================================

SVE predicated memory operations have a vector element size and a memory element access size. The vector 
element size specifies the data that is read from and written to the vector. The memory element access size specifies 
the amount of data that is read from and written to the memory.

The vector element size and the memory element access size do not need to have the same value.

For each memory element, there is an associated element address.

SVE also affects behavior in the following areas:

- Requirements for single-copy atomicity on page B2-162.
- SVE memory ordering relaxations on page B2-184.
- Load or Store of Single or Multiple registers on page B2-203.
- Endianness in SVE operations on page B2-208.
- SVE loads and stores that access Device memory on page B2-220.